package org.gephi.desktop.visualization.selection;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.gephi.visualization.api.VisualisationModel;
import org.gephi.visualization.api.VisualizationController;
import org.gephi.visualization.api.VisualizationPropertyChangeListener;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

public class SelectionPropertiesToolbar extends javax.swing.JPanel {

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXHyperlink configureLink;
    private javax.swing.JSeparator endSeparator;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates new form SelectionBar
     */
    public SelectionPropertiesToolbar() {
        initComponents();
        VisualizationController visualizationController = Lookup.getDefault().lookup(VisualizationController.class);
        visualizationController.addPropertyChangeListener(new VisualizationPropertyChangeListener() {

            @Override
            public void propertyChange(VisualisationModel model, PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("selection")) {
                    refresh();
                }
            }
        });
        refresh();

        configureLink.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (statusLabel.isEnabled()) {
                    JPopupMenu menu = createPopup();
                    menu.show(statusLabel, 0, statusLabel.getHeight());
                }
            }
        });
    }

    public JPopupMenu createPopup() {
        VisualizationController controller = Lookup.getDefault().lookup(VisualizationController.class);
        VisualisationModel model = controller.getModel();

        final MouseSelectionPopupPanel popupPanel = new MouseSelectionPopupPanel();
        popupPanel.setDiameter(model.getMouseSelectionDiameter());
        popupPanel.setProportionnalToZoom(model.isMouseSelectionZoomProportional());
        popupPanel.setChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                controller.setMouseSelectionDiameter(popupPanel.getDiameter());
                controller.setMouseSelectionZoomProportional(popupPanel.isProportionnalToZoom());
            }
        });

        JPopupMenu menu = new JPopupMenu();
        menu.add(popupPanel);
        return menu;
    }

    public void refresh() {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                VisualizationController controller = Lookup.getDefault().lookup(VisualizationController.class);
                VisualisationModel model = controller.getModel();
                if (model == null) {
                    return;
                }
                if (model.isSelectionEnabled()) {
                    if (model.isRectangleSelection()) {
                        configureLink.setVisible(false);
                        statusLabel.setText(
                            NbBundle.getMessage(SelectionPropertiesToolbar.class, "SelectionBar.statusLabel.rectangleSelection"));
                    } else if (model.isDirectMouseSelection()) {
                        configureLink.setVisible(true);
                        statusLabel.setText(
                            NbBundle.getMessage(SelectionPropertiesToolbar.class, "SelectionBar.statusLabel.mouseSelection"));
                    }
                } else {
                    configureLink.setVisible(false);
                    statusLabel
                        .setText(NbBundle.getMessage(SelectionPropertiesToolbar.class, "SelectionBar.statusLabel.noSelection"));
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        statusLabel = new javax.swing.JLabel();
        configureLink = new org.jdesktop.swingx.JXHyperlink();
        endSeparator = new javax.swing.JSeparator();

        setPreferredSize(new java.awt.Dimension(180, 28));
        setLayout(new java.awt.GridBagLayout());
        setOpaque(true);

        statusLabel.setFont(statusLabel.getFont().deriveFont((float) 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 1, 0);
        add(statusLabel, gridBagConstraints);

        configureLink.setText(
            org.openide.util.NbBundle.getMessage(SelectionPropertiesToolbar.class, "SelectionBar.configureLink.text")); // NOI18N
        configureLink.setDefaultCapable(false);
        configureLink.setFocusable(false);
        configureLink.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(configureLink, gridBagConstraints);

        endSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        endSeparator.setPreferredSize(new java.awt.Dimension(3, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        add(endSeparator, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setEnabled(final boolean enabled) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                for (Component c : getComponents()) {
                    c.setEnabled(enabled);
                }
            }
        });
    }
}
